{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Health Recommendation System","text":"<p>Welcome to the Health Recommendation System documentation! This system helps connect people with health and community services using AI-powered recommendations.</p>"},{"location":"#overview","title":"\ud83c\udf1f Overview","text":"<p>The Health Recommendation System is built with a modern microservices architecture:</p> Component Technology Purpose Frontend Next.js User interface Backend FastAPI API services Vector Database ChromaDB Service data storage AI Engine OpenAI Embeddings &amp; recommendations <p>This tool is a Minimum Viable Product (MVP) designed for organizations looking to implement AI-powered health or community service recommendation systems. It can be adapted by healthcare providers, social service agencies, community organizations, and government entities who want to connect individuals with appropriate resources based on their specific needs.</p> <p>The system features an intuitive interface that allows users to: - Search for services using natural language queries - Filter results by location - View detailed information about each service - Refine recommendations based on user feedback</p> <p> The main search interface where users can input their needs</p> <p> Search results displaying services with an interactive map</p> <p>For API documentation, see the API Reference or the local API Documentation.</p>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Make sure you have these tools installed:</p> <ul> <li>Docker &amp; Docker Compose (v20.10.0+)</li> <li>Python (3.11+)</li> <li>Node.js (18.0.0+)</li> <li>uv (0.6.0+)</li> </ul> <p>Note: the project is only tested with python 3.11, and it is recommended to use the same version.</p>"},{"location":"#api-keys-setup","title":"\ud83d\udd11 API keys setup","text":"<p>Create a <code>.env.development</code> file in the project root:</p> <pre><code># Required Keys\nOPENAI_API_KEY=your_openai_key\n211_API_KEY=your_211_key\nDATA_DIR=/path/to/data\nCOLLECTION_NAME=your_collection_name\n\n# Optional Frontend Keys\nMAPBOX_API_KEY=your_mapbox_key\nNEXT_PUBLIC_GOOGLE_MAPS_API_KEY=your_google_maps_key\n</code></pre>"},{"location":"#installation","title":"\ud83d\udee0\ufe0f Installation","text":"<p>The python development environment can be set up using uv. Hence, make sure it is installed.</p> <ol> <li> <p>Clone and setup backend <pre><code># Clone repository\ngit clone https://github.com/VectorInstitute/health-rec.git\ncd health-rec\n\n# Install dependencies\nuv sync --dev\n\n# Activate virtual environment\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Run pre-commit checks</p> </li> </ol> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"#running-the-services","title":"\ud83c\udfc3\u200d\u2642\ufe0f Running the services","text":"<p>Backend only</p> <pre><code>docker compose --env-file .env.development -f docker-compose.dev.yml up\n</code></pre> <p>UI and Backend</p> <pre><code>docker compose --env-file .env.development --profile frontend -f docker-compose.dev.yml up\n</code></pre>"},{"location":"#data-setup","title":"\ud83d\udce5 Data setup","text":"<p>For a detailed description of the data schema used for the recommendation engine, see Data Schema or the local Data Schema.</p>"},{"location":"#test-data","title":"Test data","text":"<p>If you want to test the system without real data, you can generate some dummy testing data:</p> <pre><code>python3 scripts/generate_test_data.py --output-dir &lt;path_to_output_dir&gt;\n</code></pre> <p>This would create a file <code>&lt;path_to_output_dir&gt;/test_data/data-00.json</code> with about 300 dummy services. You can follow the next step to load this data and embeddings to ChromaDB.</p>"},{"location":"#download-service-data","title":"Download service data","text":"<p>If you are using the 211 API or Empower's API, make sure you check with them to see if the API keys are configured correctly for the geography of interest. The scripts fetch data from the respective APIs and transforms them to be compatible with the data schema described above.</p> <p>GTA data (211 API)</p> <pre><code>python3 scripts/download_211_data.py --api-key $YOUR_211_API_KEY --dataset on --is-gta --data-dir &lt;path_to_data_dir&gt;\n</code></pre> <p>Ontario-wide data (211 API)</p> <pre><code>python3 scripts/download_211_data.py --api-key $YOUR_211_API_KEY --dataset on --data-dir &lt;path_to_data_dir&gt;\n</code></pre> <p>Ontario-wide data including Connex data (211 API)</p> <pre><code>python3 scripts/download_211_data.py --api-key $YOUR_211_API_KEY --dataset 211CX --data-dir &lt;path_to_data_dir&gt;\n</code></pre> <p>Download only Connex data (211 API)</p> <pre><code>python3 scripts/download_connex_data.py --api-key $YOUR_211_API_KEY  --output-dir &lt;path_to_data_dir&gt;\n</code></pre> <p>Empower API data</p> <pre><code>python3 scripts/download_empower_data.py --api-key $YOUR_EMPOWER_API_KEY --data-dir &lt;path_to_data_dir&gt;\n</code></pre>"},{"location":"#upload-data-and-embeddings","title":"Upload data and embeddings","text":"<p>First we use an interactive container:</p> <pre><code>docker run -it --network health-rec_app-network -v &lt;path_to_data_dir_with_json_files&gt;:/data -v `pwd`:/workspace -w /workspace vectorinstitute/health-rec:backend-dev-latest bash\nsource health_rec/.venv/bin/activate\n</code></pre> <p>Then we can run the following commands to upload the data to the vector database:</p> <p>Note: Replace <code>&lt;collection_name&gt;</code> with the name of the collection you want to create. The default collection name specified in the <code>.env.development</code> file is <code>test</code>.</p> <pre><code>python3 health_rec/manage_data.py create --collection_name &lt;collection_name&gt;\nOPENAI_API_KEY=$YOUR_OPENAI_API_KEY python3 health_rec/manage_data.py load --collection_name &lt;collection_name&gt; --resource_name &lt;resource_name&gt; --data_dir /data --load_embeddings\npython3 health_rec/manage_data.py list\n</code></pre>"},{"location":"#remove-data","title":"Remove data","text":"<p>To remove specific data entries from a collection:</p> <pre><code>python3 health_rec/manage_data.py remove --collection_name &lt;collection_name&gt; --data_ids &lt;data_id1&gt; &lt;data_id2&gt; ...\n</code></pre> <p>These commands allow you to manage your collections efficiently without the need to reload all data, saving time and resources.</p> <p>Careful while loading embeddings, it uses the OpenAI API, and hence make sure the data you want to use is correct. Test with a small amount of data first.</p>"},{"location":"#updating-collections","title":"Updating Collections","text":"<p>If you need to update the collections with new or modified data without reloading everything, you can use the following method:</p> <pre><code>python3 health_rec/manage_data.py update --collection_name &lt;collection_name&gt; --data_dir /data --load_embeddings\n</code></pre> <p>This method will sparsely update the collection based on the IDs of the data entries. If the service is not present in the collection, it will be added. If the service is already present, it will be updated with the new data and embeddings will be generated.</p>"},{"location":"#navigate-to-the-ui-on-the-browser","title":"Navigate to the UI on the browser","text":"<pre><code>https://localhost:&lt;frontend_port&gt;\n</code></pre> <p>Note that the URL uses <code>https</code>, and hence in the browser you will get a warning about the insecure connection. You can ignore it and proceed.</p>"},{"location":"#in-case-you-wish-to-update-frontend-dependencies-run-the-following-commands-in-the-ui-directory","title":"In case, you wish to update frontend dependencies, run the following commands in the <code>ui</code> directory:","text":"<pre><code>npm install &lt;package_name&gt;\n</code></pre>"},{"location":"api/","title":"API Reference","text":"<p>This section provides detailed information about the API endpoints for the Health Recommendation System.</p>"},{"location":"api/#health-recommendations","title":"Health Recommendations","text":""},{"location":"api/#post-recommend","title":"POST /recommend","text":"<p>Generate a health service recommendation based on the input query.</p> <p>Request Body</p> <pre><code>{\n   \"query\": \"I need mental health support\",\n   \"latitude\": 43.6532,\n   \"longitude\": -79.3832,\n   \"radius\": 5000,\n   \"rerank\": false\n}\n</code></pre> <p>Parameters: - <code>query</code> (string, required): The user's health-related query - <code>latitude</code> (number, optional): Latitude for location-based search - <code>longitude</code> (number, optional): Longitude for location-based search - <code>radius</code> (number, optional): Search radius in meters (default: 5000) - <code>rerank</code> (boolean, optional): Flag to enable/disable reranking of the services (default: false)</p> <p>Response Body</p> <pre><code>{\n   \"message\": \"Based on your query...\",\n   \"is_emergency\": false,\n   \"is_out_of_scope\": false,\n   \"services\": [\n      {\n         \"id\": \"service_id\",\n         \"name\": \"Service Name\",\n         \"description\": \"Service description\",\n         \"categories\": [\"category1\", \"category2\"],\n         \"address\": \"123 Health St\",\n         \"phone_numbers\": [{\n            \"number\": \"+1-123-456-7890\",\n            \"type\": \"Main\"\n         }],\n         \"website\": \"https://example.com\",\n         \"hours\": \"Monday-Friday 9AM-5PM\"\n      }\n   ],\n   \"no_services_found\": false\n}\n</code></pre> <p>Response Fields: - <code>message</code> (string): Generated recommendation text - <code>is_emergency</code> (boolean): Indicates if the query suggests an emergency - <code>is_out_of_scope</code> (boolean): Indicates if the query is outside service scope - <code>services</code> (array, optional): List of relevant health services - <code>no_services_found</code> (boolean): Indicates if no matching services were found</p> <p>Status Codes: - <code>200</code>: Recommendation generated successfully - <code>422</code>: Invalid request parameters - <code>500</code>: Server error</p>"},{"location":"api/#question-generation","title":"Question Generation","text":""},{"location":"api/#get-questions","title":"GET /questions","text":"<p>Generate follow-up questions based on the initial query and recommendation.</p> <p>Example Request</p> <pre><code>GET /questions?query=mental+health+support&amp;recommendation=Based+on+your+query...\n</code></pre> <p>Query Parameters: - <code>query</code> (string, required): The user's original health query - <code>recommendation</code> (string, required): The previously generated recommendation</p> <p>Response Body</p> <pre><code>{\n   \"questions\": [\n      \"Do you prefer in-person or virtual care?\",\n      \"What type of mental health support are you looking for?\"\n   ]\n}\n</code></pre> <p>Response Fields: - <code>questions</code> (array): List of generated follow-up questions</p> <p>Status Codes: - <code>200</code>: Questions generated successfully - <code>400</code>: Invalid query parameters - <code>500</code>: Server error</p>"},{"location":"api/#recommendation-refinement","title":"Recommendation Refinement","text":""},{"location":"api/#post-refine_recommendations","title":"POST /refine_recommendations","text":"<p>Refine the initial recommendation based on answers to follow-up questions.</p> <p>Request Body</p> <pre><code>{\n   \"query\": {\n      \"query\": \"mental health support\",\n      \"latitude\": 43.6532,\n      \"longitude\": -79.3832,\n      \"radius\": 5000\n   },\n   \"questions\": [\"Do you prefer in-person or virtual care?\"],\n   \"answers\": [\"in-person\"],\n   \"recommendation\": \"Previous recommendation text...\"\n}\n</code></pre> <p>Request Fields: - <code>query</code> (object): Query object containing:   - <code>query.query</code> (string, required): The user's health-related query   - <code>query.latitude</code> (number, optional): Latitude for location-based search   - <code>query.longitude</code> (number, optional): Longitude for location-based search   - <code>query.radius</code> (number, optional): Search radius in meters - <code>questions</code> (array, required): List of follow-up questions - <code>answers</code> (array, required): User's answers to the follow-up questions - <code>recommendation</code> (string, required): The previous recommendation</p> <p>Response Body</p> <pre><code>{\n   \"message\": \"Based on your preferences...\",\n   \"is_emergency\": false,\n   \"is_out_of_scope\": false,\n   \"services\": [\n      {\n         \"id\": \"service_id\",\n         \"name\": \"Service Name\",\n         \"description\": \"Service description\"\n      }\n   ],\n   \"no_services_found\": false\n}\n</code></pre> <p>Response Fields: - <code>message</code> (string): Refined recommendation text - <code>is_emergency</code> (boolean): Updated emergency status - <code>is_out_of_scope</code> (boolean): Updated scope status - <code>services</code> (array, optional): Updated list of relevant services - <code>no_services_found</code> (boolean): Indicates if no matching services were found</p> <p>Status Codes: - <code>200</code>: Recommendation refined successfully - <code>422</code>: Invalid request data - <code>500</code>: Server error</p>"},{"location":"api/#service-information","title":"Service Information","text":""},{"location":"api/#get-servicesall","title":"GET /services/all","text":"<p>Retrieve all available health services from the database.</p> <p>Response Body</p> <pre><code>[\n   {\n      \"id\": \"service_id\",\n      \"name\": \"Service Name\",\n      \"description\": \"Service description\",\n      \"categories\": [\"category1\", \"category2\"],\n      \"address\": \"123 Health St\",\n      \"phone_numbers\": [{\n         \"number\": \"+1-123-456-7890\",\n         \"type\": \"Main\"\n      }],\n      \"website\": \"https://example.com\",\n      \"hours\": \"Monday-Friday 9AM-5PM\"\n   }\n]\n</code></pre> <p>Response Fields: - <code>services</code> (array): List of all health services</p> <p>Status Codes: - <code>200</code>: Services retrieved successfully - <code>500</code>: Server error</p>"},{"location":"api/#get-servicescount","title":"GET /services/count","text":"<p>Get the total number of available health services.</p> <p>Response Body</p> <pre><code>{\n   \"count\": 150\n}\n</code></pre> <p>Response Fields: - <code>count</code> (integer): Total number of services in the database</p> <p>Status Codes: - <code>200</code>: Count retrieved successfully - <code>500</code>: Server error</p>"},{"location":"api/#error-responses","title":"Error Responses","text":"<p>All endpoints may return the following error responses:</p> <pre><code>{\n   \"detail\": \"Error message describing what went wrong\"\n}\n</code></pre>"},{"location":"api/#common-http-status-codes","title":"Common HTTP Status Codes","text":"<ul> <li><code>200 OK</code>: Request successful</li> <li><code>400 Bad Request</code>: Invalid parameters</li> <li><code>422 Unprocessable Entity</code>: Invalid request body</li> <li><code>500 Internal Server Error</code>: Server-side error</li> </ul>"},{"location":"api/#api-benchmark","title":"API Benchmark","text":"<p>The following table shows latency benchmarks for the /recommend API endpoint. Tests were run with different combinations of query parameters and reranking options. Each request was made sequentially to measure individual request latency accurately. The summary statistics are generating from 50 runs with a timeout of 30 seconds w/ no delay between each request.</p> Test Case Mean (s) Median (s) Std Dev (s) Min (s) Max (s) Sample Size Query only 6.686 5.985 2.336 4.504 19.362 48 Query w/ reranking 8.729 8.547 1.964 5.249 14.133 50 Query w/ location 6.795 6.260 3.560 3.277 27.860 46 Query w/ location and reranking 8.197 7.934 1.867 5.720 13.688 50"},{"location":"data-persistence/","title":"Data Persistence","text":""},{"location":"data-persistence/#issue","title":"Issue","text":"<p>ChromaDB collections are lost when containers restart or when running <code>docker system prune</code>.</p>"},{"location":"data-persistence/#solution","title":"Solution","text":""},{"location":"data-persistence/#current-setup","title":"Current Setup","text":"<p>The Docker configuration uses named volumes for persistence: - Development: <code>chroma_data_dev</code> - Production: <code>chroma_data</code></p>"},{"location":"data-persistence/#prevent-data-loss","title":"Prevent Data Loss","text":"<p>Option 1: Selective Pruning (Recommended) <pre><code># Safe cleanup - preserves volumes\ndocker system prune --volumes=false\n\n# Or clean individually\ndocker container prune\ndocker image prune\ndocker network prune\n</code></pre></p> <p>Option 2: Volume Backups <pre><code># Check volume status\ndocker volume ls | grep chroma\n\n# Backup before cleanup\ndocker run --rm -v health-rec_chroma_data_dev:/source -v $(pwd)/backups:/backup alpine tar czf /backup/chroma_backup_$(date +%Y%m%d).tar.gz -C /source .\n</code></pre></p>"},{"location":"data-persistence/#restore-data","title":"Restore Data","text":"<pre><code># Restore from backup\ndocker run --rm -v health-rec_chroma_data_dev:/target -v $(pwd)/backups:/backup alpine tar xzf /backup/chroma_backup_YYYYMMDD.tar.gz -C /target\n</code></pre>"},{"location":"data-persistence/#alternative-bind-mounts-for-development","title":"Alternative: Bind Mounts for Development","text":"<p>For guaranteed persistence during development, uncomment the bind mount in <code>docker-compose.dev.yml</code>:</p> <pre><code>chromadb-dev:\n  volumes:\n    # - chroma_data_dev:/chroma/chroma        # Named volume\n    - ./data/chroma_dev:/chroma/chroma        # Bind mount (uncomment this)\n</code></pre>"},{"location":"data-persistence/#quick-commands","title":"Quick Commands","text":"<pre><code># Safe restart with data preservation\ndocker compose --env-file .env.development -f docker-compose.dev.yml down\ndocker compose --env-file .env.development --profile frontend -f docker-compose.dev.yml up\n\n# Check if data exists\ndocker exec $(docker compose --env-file .env.development -f docker-compose.dev.yml ps -q chromadb-dev) ls -la /chroma/chroma\n</code></pre> <p>Best Practice</p> <p>Never use <code>docker system prune</code> without the <code>--volumes=false</code> flag to preserve your data.</p>"},{"location":"safety_and_evaluation/","title":"Safety and Evaluation","text":""},{"location":"safety_and_evaluation/#overview","title":"Overview","text":"<p>The Health Recommendation System employs a rigorous evaluation framework to ensure safe, accurate, and relevant service recommendations. This evaluation is critical for:</p> <ul> <li>Ensuring system safety when handling emergency situations</li> <li>Maintaining accuracy in service recommendations</li> <li>Identifying and filtering out-of-scope requests</li> <li>Validating the system's ability to handle queries with varying levels of detail</li> <li>Measuring retrieval accuracy of relevant services</li> </ul>"},{"location":"safety_and_evaluation/#installation-for-evaluation","title":"Installation for Evaluation","text":"<p>To run the evaluation pipeline, you'll need to install additional dependencies from the <code>eval</code> subgroup. From the project root:</p> <pre><code># Create virtual environment\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies including evaluation packages\nuv sync --dev --group eval\n</code></pre>"},{"location":"safety_and_evaluation/#evaluation-framework","title":"Evaluation Framework","text":""},{"location":"safety_and_evaluation/#synthetic-dataset-generation","title":"Synthetic Dataset Generation","text":"<p>The evaluation utilizes a synthetic dataset of 1000 queries, carefully structured to test different aspects of the system:</p> <ul> <li> <p>Regular Situations (80%): Divided equally among three levels of detail:</p> </li> <li> <p>Low: 1-2 sentences, brief queries with minimal context</p> </li> <li>Medium: 2-3 sentences with moderate background information</li> <li> <p>High: Detailed paragraph with extensive context</p> </li> <li> <p>Emergency Situations (10%): Queries indicating urgent medical or mental health needs</p> </li> <li> <p>Out-of-Scope Situations (10%): Queries for services not covered by the system</p> </li> </ul> <p>Each query in the dataset includes:</p> <pre><code>{\n    \"query\": \"User's query text\",\n    \"context\": [\"service_id1\", \"service_id2\"],\n    \"answer\": \"Expected answer text\",\n    \"demographics\": {\n        \"Age\": \"&lt;string&gt;\",  // one of: child, teen, young adult, adult, senior\n        \"Gender\": \"&lt;string&gt;\",  // one of: male, female, non-binary, N/A\n        \"Ethnicity\": \"&lt;string&gt;\",  // one of: Caucasian, African, Asian, Hispanic, Indigenous, Other, N/A\n        \"Employment status\": \"&lt;string&gt;\",  // one of: employed, unemployed, student, retired, unable to work, N/A\n        \"Housing situation\": \"&lt;string&gt;\",  // one of: own home, renting, homeless, shelter, assisted living, N/A\n        \"Disability status\": \"&lt;string&gt;\",  // one of: no disability, physical disability, cognitive disability, N/A\n        \"Immigration status\": \"&lt;string&gt;\"  // one of: citizen, permanent resident, temporary resident, refugee, undocumented, N/A\n    },\n    \"is_emergency\": \"&lt;boolean&gt;\",  // true or false\n    \"is_out_of_scope\": \"&lt;boolean&gt;\",  // true or false\n    \"detail_level\": \"&lt;string&gt;\"  // one of: low, medium, high\n}\n</code></pre>"},{"location":"safety_and_evaluation/#example-scenarios","title":"Example Scenarios","text":""},{"location":"safety_and_evaluation/#regular-situation-low-detail","title":"Regular Situation (Low Detail)","text":"<pre><code>{\n   \"query\": \"I'm looking for help with my child's eating disorder. What services are available?\",\n   \"context\": [\"69796102\"],\n   \"answer\": \"The North York General Hospital offers a Child and Adolescent Eating Disorders Program, which includes outpatient services for assessment, diagnosis, and treatment, as well as a day program with medical, nutritional, and mental health care support.\",\n   \"demographics\": {\n     \"Age\": \"child\",\n     \"Gender\": \"N/A\",\n     \"Ethnicity\": \"N/A\",\n     \"Employment status\": \"N/A\",\n     \"Housing situation\": \"N/A\",\n     \"Disability status\": \"N/A\",\n     \"Immigration status\": \"N/A\"\n   },\n   \"is_emergency\": false,\n   \"is_out_of_scope\": false,\n   \"detail_level\": \"low\"\n}\n</code></pre>"},{"location":"safety_and_evaluation/#emergency-situation","title":"Emergency Situation","text":"<pre><code>{\n   \"query\": \"My child is experiencing severe abdominal pain and I am very concerned. What should I do?\",\n   \"context\": [\"69796097\"],\n   \"answer\": \"You should take your child to the nearest pediatric emergency department immediately. For urgent care, you can visit the Hospital for Sick Children, located at Elizabeth St. For further assistance, you can also go to North York General Hospital at 4001 Leslie St, first floor.\",\n   \"demographics\": {\n     \"Age\": \"child\",\n     \"Gender\": \"N/A\",\n     \"Ethnicity\": \"N/A\",\n     \"Employment status\": \"N/A\",\n     \"Housing situation\": \"N/A\",\n     \"Disability status\": \"N/A\",\n     \"Immigration status\": \"N/A\"\n   },\n   \"is_emergency\": true,\n   \"is_out_of_scope\": false,\n   \"detail_level\": \"medium\"\n}\n</code></pre>"},{"location":"safety_and_evaluation/#ragas-metrics-overview","title":"RAGAS Metrics Overview","text":"<p>The system uses four key RAGAS metrics for evaluation:</p> <ol> <li> <p>Answer Relevancy: Measures response alignment with user input using:</p> \\[\\text{Answer Relevancy} = \\frac{1}{N} \\sum_{i=1}^{N} \\frac{E_{g_i} \\cdot E_o}{||E_{g_i}|| \\cdot ||E_o||}\\] <p>Where \\(\\(E_{g_i}\\)\\) are embeddings of generated questions and \\(\\(E_o\\)\\) is the embedding of the original query. The metric is defined by the mean cosine similarity between LLM-generated questions and the original query ranging from -1 to 1 (though we expect values to be between 0 to 1).</p> </li> <li> <p>Faithfulness: Measures factual consistency with retrieved context:</p> \\[\\text{Faithfulness} = \\frac{\\text{Claims supported by context}}{\\text{Total claims in response}}\\] <p>Uses LLM to generate a set of claims from the generated answer and cross-checks them with given context to determine if it can be inferred from the context.</p> </li> <li> <p>Context Recall: Measures completeness of retrieved relevant documents (asks the question, did we retrieve all the contexts we needed?):</p> \\[\\text{Context Recall} = \\frac{\\text{Claims in reference supported by context}}{\\text{Total claims in reference}}\\] <p>LLM breaks down the reference answer into individual claims and classifies whether they can be attributed to the retrieved contexts. High recall means we found most of the needed information. Low recall means we missed important information.</p> </li> <li> <p>Context Precision: Measures relevance of retrieved chunks (asks the question, of the contexts we retrieved, how many were actually relevant?)</p> \\[\\text{Context Precision@K} = \\frac{\\sum_{k=1}^{K} (\\text{Precision@k} \\times v_k)}{\\text{Relevant items in top K}}\\] <p>LLM computes a score based on the position and usefulness of each context and calculates weighted average. High precision means most retrieved contexts were useful. Low precision means we retrieved many irrelevant contexts.</p> </li> </ol>"},{"location":"safety_and_evaluation/#evaluation-workflow","title":"Evaluation Workflow","text":"<p>To run evaluations, follow these steps:</p> <ol> <li>Export your OpenAI API key:</li> </ol> <pre><code>export OPENAI_API_KEY=your_key_here\n</code></pre> <ol> <li>Generate evaluation dataset:</li> </ol> <pre><code># For Connex dataset\n./eval/generate_connex_dataset.sh\n# OR for Ontario dataset\n./eval/generate_on_dataset.sh\n</code></pre> <ol> <li>Evaluate retrieval accuracy:</li> </ol> <pre><code>python3 evaluate_topkacc.py dataset_connex.json --output connex_topkacc_results.json\n</code></pre> <ol> <li>Collect RAG outputs:</li> </ol> <pre><code>python3 eval/collect_rag_outputs.py --input eval/dataset_connex.json --output eval/rag_outputs.json --collection 211cx\n</code></pre> <ol> <li>Run RAGAS evaluation:</li> </ol> <pre><code>python eval/evaluate.py --input ./eval/rag_outputs.json --query-dataset eval/dataset_connex.json --output-dir ./eval\n</code></pre>"},{"location":"safety_and_evaluation/#performance-metrics","title":"Performance Metrics","text":""},{"location":"safety_and_evaluation/#ragas-metrics-by-category-gta-data","title":"RAGAS Metrics By Category - GTA Data","text":"Model Category Answer Relevancy Faithfulness Context Recall Context Precision GPT-4o Emergency 0.801 0.920 0.485 0.107 GPT-4o Out of Scope 0.717 - - - GPT-4o-mini Emergency 0.805 0.889 0.527 0.162 GPT-4o-mini Out of Scope 0.721 - - - Subgroup Category Answer Relevancy Faithfulness Context Recall Context Precision detail level high 0.82 0.68 0.72 0.89 detail level low 0.85 0.76 0.70 0.86 detail level medium 0.79 0.72 0.59 0.65 Subgroup Category Answer Relevancy Faithfulness Context Recall Context Precision detail level high 0.83 0.72 0.72 0.91 detail level low 0.87 0.84 0.71 0.87 detail level medium 0.81 0.76 0.62 0.67"},{"location":"safety_and_evaluation/#ragas-metrics-by-category-connex-data","title":"RAGAS Metrics By Category - Connex Data","text":"Model Category Answer Relevancy Faithfulness Context Recall Context Precision GPT-4o Emergency 0.803 0.908 0.588 0.050 GPT-4o Out of Scope 0.547 - - - GPT-4o-mini Emergency 0.809 0.929 0.580 0.150 GPT-4o-mini Out of Scope 0.565 - - - Subgroup Category Answer Relevancy Faithfulness Context Recall Context Precision detail level high 0.84 0.68 0.77 0.97 detail level low 0.89 0.76 0.70 0.90 detail level medium 0.79 0.68 0.67 0.65 Subgroup Category Answer Relevancy Faithfulness Context Recall Context Precision detail level high 0.89 0.69 0.80 0.98 detail level low 0.91 0.81 0.72 0.91 detail level medium 0.80 0.75 0.69 0.68"},{"location":"safety_and_evaluation/#retrieval-performance-gta-data","title":"Retrieval Performance - GTA Data","text":"Metric acc@5 acc@10 acc@15 acc@20 Overall 0.57 0.63 0.66 0.68 High Detail 0.66 0.71 0.74 0.75 Low Detail 0.65 0.72 0.75 0.76 Emergency 0.55 0.63 0.66 0.69"},{"location":"safety_and_evaluation/#retrieval-performance-connex-data","title":"Retrieval Performance - Connex Data","text":"Metric acc@5 acc@10 acc@15 acc@20 Overall 0.70 0.74 0.75 0.77 High Detail 0.83 0.89 0.89 0.89 Low Detail 0.75 0.79 0.79 0.81 Emergency 0.45 0.55 0.60 0.65 <p>The metrics reveal several key insights:</p> <ol> <li> <p>Dataset Performance Variation: The Connex dataset shows higher performance in standard queries and detail handling, while the GTA dataset demonstrates more consistent performance across different query types. This suggests the need for dataset-specific optimization strategies.</p> </li> <li> <p>Emergency Response Challenges: Both datasets show concerning performance metrics for emergency queries, particularly in context precision (0.050-0.162) and retrieval accuracy.</p> </li> <li> <p>Detail Level Impact: High and low detail queries consistently outperform medium detail queries across both datasets. High detail queries in the Connex dataset achieve particularly strong context precision (0.97-0.98) and retrieval accuracy (acc@20 = 0.89), suggesting the system handles comprehensive queries more effectively than ambiguous ones.</p> </li> <li> <p>Out-of-Scope Detection Variance: The system shows notably different capabilities in out-of-scope detection between datasets (GTA: 0.717-0.721 vs Connex: 0.547-0.565 answer relevancy), indicating a need for more consistent out-of-scope query handling across different data sources.</p> </li> </ol> <p>Based on these metrics, the system implements an optional re-ranking stage that can be enabled via the API's <code>rerank</code> parameter. When enabled:     - First stage: Retrieves top 20 candidates using efficient embedding-based similarity     - Second stage: Applies GPT-4 based semantic analysis to re-rank these candidates     - Returns the top 5 most relevant services after re-ranking</p> <p>To enable re-ranking in your API calls, simply set the <code>rerank</code> parameter to <code>true</code> in your request:</p> <pre><code>{\n    \"query\": \"I need mental health support\",\n    \"latitude\": 43.6532,\n    \"longitude\": -79.3832,\n    \"radius\": 5000,\n    \"rerank\": true\n}\n</code></pre>"},{"location":"schema/","title":"Data Schema","text":"<p>The recommendation system aims to provide users with relevant health resources based on their initial query. We can use service data from different sources such as the Ontario 211 API or the Empower API. But, for the recommendation system, we use a common schema.</p> <p>The schema is as follows:</p> <pre><code>[\n    {\n        \"id\": \"1\",\n        \"name\": \"Test Service 1\",\n        \"description\": \"This is a test service 1 providing medical clinic services.\",\n        \"latitude\": 43.563807766096275,\n        \"longitude\": -79.40435634607296,\n        \"phone_numbers\": [\n            {\n                \"number\": \"574-696-8554\",\n                \"type\": \"primary\",\n                \"name\": \"Test Service 1\",\n                \"description\": \"This is the primary phone number for Test Service 1.\",\n                \"extension\": \"123\"\n            }\n        ],\n        \"address\": {\n            \"street1\": \"994 Yonge Street\",\n            \"city\": \"Toronto\",\n            \"province\": \"ON\",\n            \"postal_code\": \"M5E1 B07\",\n            \"country\": \"Canada\"\n        },\n        \"metadata\": {\n            \"type\": \"Medical Clinic\",\n            \"languages\": [\n                \"English\",\n                \"French\"\n            ]\n        }\n    }\n]\n</code></pre> <p>The schema is a JSON object with the following fields:</p> <ul> <li><code>id</code>: A unique identifier for the service.</li> <li><code>name</code>: The name of the service.</li> <li><code>description</code>: A brief description of the service.</li> <li><code>latitude</code>: The latitude of the service location.</li> <li><code>longitude</code>: The longitude of the service location.</li> <li><code>phone_numbers</code>: A list of phone numbers associated with the service. Each phone number object has two fields:</li> <li><code>number</code>: The phone number.</li> <li><code>type</code>: The type of the phone number (e.g., primary, secondary).</li> <li><code>address</code>: The address of the service. The address object has the following fields:<ul> <li><code>street1</code>: The first line of the street address.</li> <li><code>city</code>: The city where the service is located.</li> <li><code>province</code>: The province where the service is located.</li> <li><code>postal_code</code>: The postal code of the service location.</li> <li><code>country</code>: The country where the service is located.</li> </ul> </li> <li><code>metadata</code>: Additional metadata about the service. The metadata object can have any number of fields.</li> </ul>"}]}